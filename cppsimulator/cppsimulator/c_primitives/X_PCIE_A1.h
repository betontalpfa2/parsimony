/******************************************************************************
 * Generated Cpp template for simulation primitives.
 * Author: Benedek Racz
 ******************************************************************************/

#include "NetFlow.h"
#include "sim_types.h"

namespace CPrimitives {

	class X_PCIE_A1{

		//Verilog Parameters:
		parameter_string_t LOC;
		parameter_int_t BAR0;
		parameter_int_t BAR1;
		parameter_int_t BAR2;
		parameter_int_t BAR3;
		parameter_int_t BAR4;
		parameter_int_t BAR5;
		parameter_int_t CARDBUS_CIS_POINTER;
		parameter_int_t CLASS_CODE;
		parameter_int_t DEV_CAP_ENDPOINT_L0S_LATENCY;
		parameter_int_t DEV_CAP_ENDPOINT_L1_LATENCY;
		parameter_enum_t DEV_CAP_EXT_TAG_SUPPORTED;
		parameter_int_t DEV_CAP_MAX_PAYLOAD_SUPPORTED;
		parameter_int_t DEV_CAP_PHANTOM_FUNCTIONS_SUPPORT;
		parameter_enum_t DEV_CAP_ROLE_BASED_ERROR;
		parameter_enum_t DISABLE_BAR_FILTERING;
		parameter_enum_t DISABLE_ID_CHECK;
		parameter_enum_t DISABLE_SCRAMBLING;
		parameter_enum_t ENABLE_RX_TD_ECRC_TRIM;
		parameter_int_t EXPANSION_ROM;
		parameter_enum_t FAST_TRAIN;
		parameter_int_t GTP_SEL;
		parameter_int_t LINK_CAP_ASPM_SUPPORT;
		parameter_int_t LINK_CAP_L0S_EXIT_LATENCY;
		parameter_int_t LINK_CAP_L1_EXIT_LATENCY;
		parameter_enum_t LINK_STATUS_SLOT_CLOCK_CONFIG;
		parameter_int_t LL_ACK_TIMEOUT;
		parameter_enum_t LL_ACK_TIMEOUT_EN;
		parameter_int_t LL_REPLAY_TIMEOUT;
		parameter_enum_t LL_REPLAY_TIMEOUT_EN;
		parameter_int_t MSI_CAP_MULTIMSGCAP;
		parameter_int_t MSI_CAP_MULTIMSG_EXTENSION;
		parameter_int_t PCIE_CAP_CAPABILITY_VERSION;
		parameter_int_t PCIE_CAP_DEVICE_PORT_TYPE;
		parameter_int_t PCIE_CAP_INT_MSG_NUM;
		parameter_enum_t PCIE_CAP_SLOT_IMPLEMENTED;
		parameter_int_t PCIE_GENERIC;
		parameter_enum_t PLM_AUTO_CONFIG;
		parameter_int_t PM_CAP_AUXCURRENT;
		parameter_enum_t PM_CAP_D1SUPPORT;
		parameter_enum_t PM_CAP_D2SUPPORT;
		parameter_enum_t PM_CAP_DSI;
		parameter_int_t PM_CAP_PMESUPPORT;
		parameter_enum_t PM_CAP_PME_CLOCK;
		parameter_int_t PM_CAP_VERSION;
		parameter_int_t PM_DATA0;
		parameter_int_t PM_DATA1;
		parameter_int_t PM_DATA2;
		parameter_int_t PM_DATA3;
		parameter_int_t PM_DATA4;
		parameter_int_t PM_DATA5;
		parameter_int_t PM_DATA6;
		parameter_int_t PM_DATA7;
		parameter_int_t PM_DATA_SCALE0;
		parameter_int_t PM_DATA_SCALE1;
		parameter_int_t PM_DATA_SCALE2;
		parameter_int_t PM_DATA_SCALE3;
		parameter_int_t PM_DATA_SCALE4;
		parameter_int_t PM_DATA_SCALE5;
		parameter_int_t PM_DATA_SCALE6;
		parameter_int_t PM_DATA_SCALE7;
		parameter_string_t SIM_VERSION;
		parameter_enum_t SLOT_CAP_ATT_BUTTON_PRESENT;
		parameter_enum_t SLOT_CAP_ATT_INDICATOR_PRESENT;
		parameter_enum_t SLOT_CAP_POWER_INDICATOR_PRESENT;
		parameter_int_t TL_RX_RAM_RADDR_LATENCY;
		parameter_int_t TL_RX_RAM_RDATA_LATENCY;
		parameter_int_t TL_RX_RAM_WRITE_LATENCY;
		parameter_enum_t TL_TFC_DISABLE;
		parameter_enum_t TL_TX_CHECKS_DISABLE;
		parameter_int_t TL_TX_RAM_RADDR_LATENCY;
		parameter_int_t TL_TX_RAM_RDATA_LATENCY;
		parameter_enum_t USR_CFG;
		parameter_enum_t USR_EXT_CFG;
		parameter_enum_t VC0_CPL_INFINITE;
		parameter_int_t VC0_RX_RAM_LIMIT;
		parameter_int_t VC0_TOTAL_CREDITS_CD;
		parameter_int_t VC0_TOTAL_CREDITS_CH;
		parameter_int_t VC0_TOTAL_CREDITS_NPH;
		parameter_int_t VC0_TOTAL_CREDITS_PD;
		parameter_int_t VC0_TOTAL_CREDITS_PH;
		parameter_int_t VC0_TX_LASTPACKET;
		//Verilog Ports in definition order:
		NetFlow* CFGBUSNUMBER; // OUTPUT
		NetFlow* CFGCOMMANDBUSMASTERENABLE; // OUTPUT
		NetFlow* CFGCOMMANDINTERRUPTDISABLE; // OUTPUT
		NetFlow* CFGCOMMANDIOENABLE; // OUTPUT
		NetFlow* CFGCOMMANDMEMENABLE; // OUTPUT
		NetFlow* CFGCOMMANDSERREN; // OUTPUT
		NetFlow* CFGDEVCONTROLAUXPOWEREN; // OUTPUT
		NetFlow* CFGDEVCONTROLCORRERRREPORTINGEN; // OUTPUT
		NetFlow* CFGDEVCONTROLENABLERO; // OUTPUT
		NetFlow* CFGDEVCONTROLEXTTAGEN; // OUTPUT
		NetFlow* CFGDEVCONTROLFATALERRREPORTINGEN; // OUTPUT
		NetFlow* CFGDEVCONTROLMAXPAYLOAD; // OUTPUT
		NetFlow* CFGDEVCONTROLMAXREADREQ; // OUTPUT
		NetFlow* CFGDEVCONTROLNONFATALREPORTINGEN; // OUTPUT
		NetFlow* CFGDEVCONTROLNOSNOOPEN; // OUTPUT
		NetFlow* CFGDEVCONTROLPHANTOMEN; // OUTPUT
		NetFlow* CFGDEVCONTROLURERRREPORTINGEN; // OUTPUT
		NetFlow* CFGDEVICENUMBER; // OUTPUT
		NetFlow* CFGDEVSTATUSCORRERRDETECTED; // OUTPUT
		NetFlow* CFGDEVSTATUSFATALERRDETECTED; // OUTPUT
		NetFlow* CFGDEVSTATUSNONFATALERRDETECTED; // OUTPUT
		NetFlow* CFGDEVSTATUSURDETECTED; // OUTPUT
		NetFlow* CFGDO; // OUTPUT
		NetFlow* CFGERRCPLRDYN; // OUTPUT
		NetFlow* CFGFUNCTIONNUMBER; // OUTPUT
		NetFlow* CFGINTERRUPTDO; // OUTPUT
		NetFlow* CFGINTERRUPTMMENABLE; // OUTPUT
		NetFlow* CFGINTERRUPTMSIENABLE; // OUTPUT
		NetFlow* CFGINTERRUPTRDYN; // OUTPUT
		NetFlow* CFGLINKCONTOLRCB; // OUTPUT
		NetFlow* CFGLINKCONTROLASPMCONTROL; // OUTPUT
		NetFlow* CFGLINKCONTROLCOMMONCLOCK; // OUTPUT
		NetFlow* CFGLINKCONTROLEXTENDEDSYNC; // OUTPUT
		NetFlow* CFGLTSSMSTATE; // OUTPUT
		NetFlow* CFGPCIELINKSTATEN; // OUTPUT
		NetFlow* CFGRDWRDONEN; // OUTPUT
		NetFlow* CFGTOTURNOFFN; // OUTPUT
		NetFlow* DBGBADDLLPSTATUS; // OUTPUT
		NetFlow* DBGBADTLPLCRC; // OUTPUT
		NetFlow* DBGBADTLPSEQNUM; // OUTPUT
		NetFlow* DBGBADTLPSTATUS; // OUTPUT
		NetFlow* DBGDLPROTOCOLSTATUS; // OUTPUT
		NetFlow* DBGFCPROTOCOLERRSTATUS; // OUTPUT
		NetFlow* DBGMLFRMDLENGTH; // OUTPUT
		NetFlow* DBGMLFRMDMPS; // OUTPUT
		NetFlow* DBGMLFRMDTCVC; // OUTPUT
		NetFlow* DBGMLFRMDTLPSTATUS; // OUTPUT
		NetFlow* DBGMLFRMDUNRECTYPE; // OUTPUT
		NetFlow* DBGPOISTLPSTATUS; // OUTPUT
		NetFlow* DBGRCVROVERFLOWSTATUS; // OUTPUT
		NetFlow* DBGREGDETECTEDCORRECTABLE; // OUTPUT
		NetFlow* DBGREGDETECTEDFATAL; // OUTPUT
		NetFlow* DBGREGDETECTEDNONFATAL; // OUTPUT
		NetFlow* DBGREGDETECTEDUNSUPPORTED; // OUTPUT
		NetFlow* DBGRPLYROLLOVERSTATUS; // OUTPUT
		NetFlow* DBGRPLYTIMEOUTSTATUS; // OUTPUT
		NetFlow* DBGURNOBARHIT; // OUTPUT
		NetFlow* DBGURPOISCFGWR; // OUTPUT
		NetFlow* DBGURSTATUS; // OUTPUT
		NetFlow* DBGURUNSUPMSG; // OUTPUT
		NetFlow* MIMRXRADDR; // OUTPUT
		NetFlow* MIMRXREN; // OUTPUT
		NetFlow* MIMRXWADDR; // OUTPUT
		NetFlow* MIMRXWDATA; // OUTPUT
		NetFlow* MIMRXWEN; // OUTPUT
		NetFlow* MIMTXRADDR; // OUTPUT
		NetFlow* MIMTXREN; // OUTPUT
		NetFlow* MIMTXWADDR; // OUTPUT
		NetFlow* MIMTXWDATA; // OUTPUT
		NetFlow* MIMTXWEN; // OUTPUT
		NetFlow* PIPEGTPOWERDOWNA; // OUTPUT
		NetFlow* PIPEGTPOWERDOWNB; // OUTPUT
		NetFlow* PIPEGTTXELECIDLEA; // OUTPUT
		NetFlow* PIPEGTTXELECIDLEB; // OUTPUT
		NetFlow* PIPERXPOLARITYA; // OUTPUT
		NetFlow* PIPERXPOLARITYB; // OUTPUT
		NetFlow* PIPERXRESETA; // OUTPUT
		NetFlow* PIPERXRESETB; // OUTPUT
		NetFlow* PIPETXCHARDISPMODEA; // OUTPUT
		NetFlow* PIPETXCHARDISPMODEB; // OUTPUT
		NetFlow* PIPETXCHARDISPVALA; // OUTPUT
		NetFlow* PIPETXCHARDISPVALB; // OUTPUT
		NetFlow* PIPETXCHARISKA; // OUTPUT
		NetFlow* PIPETXCHARISKB; // OUTPUT
		NetFlow* PIPETXDATAA; // OUTPUT
		NetFlow* PIPETXDATAB; // OUTPUT
		NetFlow* PIPETXRCVRDETA; // OUTPUT
		NetFlow* PIPETXRCVRDETB; // OUTPUT
		NetFlow* RECEIVEDHOTRESET; // OUTPUT
		NetFlow* TRNFCCPLD; // OUTPUT
		NetFlow* TRNFCCPLH; // OUTPUT
		NetFlow* TRNFCNPD; // OUTPUT
		NetFlow* TRNFCNPH; // OUTPUT
		NetFlow* TRNFCPD; // OUTPUT
		NetFlow* TRNFCPH; // OUTPUT
		NetFlow* TRNLNKUPN; // OUTPUT
		NetFlow* TRNRBARHITN; // OUTPUT
		NetFlow* TRNRD; // OUTPUT
		NetFlow* TRNREOFN; // OUTPUT
		NetFlow* TRNRERRFWDN; // OUTPUT
		NetFlow* TRNRSOFN; // OUTPUT
		NetFlow* TRNRSRCDSCN; // OUTPUT
		NetFlow* TRNRSRCRDYN; // OUTPUT
		NetFlow* TRNTBUFAV; // OUTPUT
		NetFlow* TRNTCFGREQN; // OUTPUT
		NetFlow* TRNTDSTRDYN; // OUTPUT
		NetFlow* TRNTERRDROPN; // OUTPUT
		NetFlow* USERRSTN; // OUTPUT
		NetFlow* CFGDEVID; // INPUT
		NetFlow* CFGDSN; // INPUT
		NetFlow* CFGDWADDR; // INPUT
		NetFlow* CFGERRCORN; // INPUT
		NetFlow* CFGERRCPLABORTN; // INPUT
		NetFlow* CFGERRCPLTIMEOUTN; // INPUT
		NetFlow* CFGERRECRCN; // INPUT
		NetFlow* CFGERRLOCKEDN; // INPUT
		NetFlow* CFGERRPOSTEDN; // INPUT
		NetFlow* CFGERRTLPCPLHEADER; // INPUT
		NetFlow* CFGERRURN; // INPUT
		NetFlow* CFGINTERRUPTASSERTN; // INPUT
		NetFlow* CFGINTERRUPTDI; // INPUT
		NetFlow* CFGINTERRUPTN; // INPUT
		NetFlow* CFGPMWAKEN; // INPUT
		NetFlow* CFGRDENN; // INPUT
		NetFlow* CFGREVID; // INPUT
		NetFlow* CFGSUBSYSID; // INPUT
		NetFlow* CFGSUBSYSVENID; // INPUT
		NetFlow* CFGTRNPENDINGN; // INPUT
		NetFlow* CFGTURNOFFOKN; // INPUT
		NetFlow* CFGVENID; // INPUT
		NetFlow* CLOCKLOCKED; // INPUT
		NetFlow* MGTCLK; // INPUT
		NetFlow* MIMRXRDATA; // INPUT
		NetFlow* MIMTXRDATA; // INPUT
		NetFlow* PIPEGTRESETDONEA; // INPUT
		NetFlow* PIPEGTRESETDONEB; // INPUT
		NetFlow* PIPEPHYSTATUSA; // INPUT
		NetFlow* PIPEPHYSTATUSB; // INPUT
		NetFlow* PIPERXCHARISKA; // INPUT
		NetFlow* PIPERXCHARISKB; // INPUT
		NetFlow* PIPERXDATAA; // INPUT
		NetFlow* PIPERXDATAB; // INPUT
		NetFlow* PIPERXENTERELECIDLEA; // INPUT
		NetFlow* PIPERXENTERELECIDLEB; // INPUT
		NetFlow* PIPERXSTATUSA; // INPUT
		NetFlow* PIPERXSTATUSB; // INPUT
		NetFlow* SYSRESETN; // INPUT
		NetFlow* TRNFCSEL; // INPUT
		NetFlow* TRNRDSTRDYN; // INPUT
		NetFlow* TRNRNPOKN; // INPUT
		NetFlow* TRNTCFGGNTN; // INPUT
		NetFlow* TRNTD; // INPUT
		NetFlow* TRNTEOFN; // INPUT
		NetFlow* TRNTERRFWDN; // INPUT
		NetFlow* TRNTSOFN; // INPUT
		NetFlow* TRNTSRCDSCN; // INPUT
		NetFlow* TRNTSRCRDYN; // INPUT
		NetFlow* TRNTSTRN; // INPUT
		NetFlow* USERCLK; // INPUT
		
	
		X_PCIE_A1(
			//Verilog Parameters:
			parameter_string_t LOC, // Default: "UNPLACED"
			parameter_int_t BAR0, // Default: 32'h00000000
			parameter_int_t BAR1, // Default: 32'h00000000
			parameter_int_t BAR2, // Default: 32'h00000000
			parameter_int_t BAR3, // Default: 32'h00000000
			parameter_int_t BAR4, // Default: 32'h00000000
			parameter_int_t BAR5, // Default: 32'h00000000
			parameter_int_t CARDBUS_CIS_POINTER, // Default: 32'h00000000
			parameter_int_t CLASS_CODE, // Default: 24'h000000
			parameter_int_t DEV_CAP_ENDPOINT_L0S_LATENCY, // Default: 7
			parameter_int_t DEV_CAP_ENDPOINT_L1_LATENCY, // Default: 7
			parameter_enum_t DEV_CAP_EXT_TAG_SUPPORTED, // Default: "FALSE"
			parameter_int_t DEV_CAP_MAX_PAYLOAD_SUPPORTED, // Default: 2
			parameter_int_t DEV_CAP_PHANTOM_FUNCTIONS_SUPPORT, // Default: 0
			parameter_enum_t DEV_CAP_ROLE_BASED_ERROR, // Default: "TRUE"
			parameter_enum_t DISABLE_BAR_FILTERING, // Default: "FALSE"
			parameter_enum_t DISABLE_ID_CHECK, // Default: "FALSE"
			parameter_enum_t DISABLE_SCRAMBLING, // Default: "FALSE"
			parameter_enum_t ENABLE_RX_TD_ECRC_TRIM, // Default: "FALSE"
			parameter_int_t EXPANSION_ROM, // Default: 22'h000000
			parameter_enum_t FAST_TRAIN, // Default: "FALSE"
			parameter_int_t GTP_SEL, // Default: 0
			parameter_int_t LINK_CAP_ASPM_SUPPORT, // Default: 1
			parameter_int_t LINK_CAP_L0S_EXIT_LATENCY, // Default: 7
			parameter_int_t LINK_CAP_L1_EXIT_LATENCY, // Default: 7
			parameter_enum_t LINK_STATUS_SLOT_CLOCK_CONFIG, // Default: "FALSE"
			parameter_int_t LL_ACK_TIMEOUT, // Default: 15'h0204
			parameter_enum_t LL_ACK_TIMEOUT_EN, // Default: "FALSE"
			parameter_int_t LL_REPLAY_TIMEOUT, // Default: 15'h060D
			parameter_enum_t LL_REPLAY_TIMEOUT_EN, // Default: "FALSE"
			parameter_int_t MSI_CAP_MULTIMSGCAP, // Default: 0
			parameter_int_t MSI_CAP_MULTIMSG_EXTENSION, // Default: 0
			parameter_int_t PCIE_CAP_CAPABILITY_VERSION, // Default: 4'h1
			parameter_int_t PCIE_CAP_DEVICE_PORT_TYPE, // Default: 4'h0
			parameter_int_t PCIE_CAP_INT_MSG_NUM, // Default: 5'b00000
			parameter_enum_t PCIE_CAP_SLOT_IMPLEMENTED, // Default: "FALSE"
			parameter_int_t PCIE_GENERIC, // Default: 12'h000
			parameter_enum_t PLM_AUTO_CONFIG, // Default: "FALSE"
			parameter_int_t PM_CAP_AUXCURRENT, // Default: 0
			parameter_enum_t PM_CAP_D1SUPPORT, // Default: "TRUE"
			parameter_enum_t PM_CAP_D2SUPPORT, // Default: "TRUE"
			parameter_enum_t PM_CAP_DSI, // Default: "FALSE"
			parameter_int_t PM_CAP_PMESUPPORT, // Default: 5'b01111
			parameter_enum_t PM_CAP_PME_CLOCK, // Default: "FALSE"
			parameter_int_t PM_CAP_VERSION, // Default: 3
			parameter_int_t PM_DATA0, // Default: 8'h1E
			parameter_int_t PM_DATA1, // Default: 8'h1E
			parameter_int_t PM_DATA2, // Default: 8'h1E
			parameter_int_t PM_DATA3, // Default: 8'h1E
			parameter_int_t PM_DATA4, // Default: 8'h1E
			parameter_int_t PM_DATA5, // Default: 8'h1E
			parameter_int_t PM_DATA6, // Default: 8'h1E
			parameter_int_t PM_DATA7, // Default: 8'h1E
			parameter_int_t PM_DATA_SCALE0, // Default: 2'b01
			parameter_int_t PM_DATA_SCALE1, // Default: 2'b01
			parameter_int_t PM_DATA_SCALE2, // Default: 2'b01
			parameter_int_t PM_DATA_SCALE3, // Default: 2'b01
			parameter_int_t PM_DATA_SCALE4, // Default: 2'b01
			parameter_int_t PM_DATA_SCALE5, // Default: 2'b01
			parameter_int_t PM_DATA_SCALE6, // Default: 2'b01
			parameter_int_t PM_DATA_SCALE7, // Default: 2'b01
			parameter_string_t SIM_VERSION, // Default: "1.0"
			parameter_enum_t SLOT_CAP_ATT_BUTTON_PRESENT, // Default: "FALSE"
			parameter_enum_t SLOT_CAP_ATT_INDICATOR_PRESENT, // Default: "FALSE"
			parameter_enum_t SLOT_CAP_POWER_INDICATOR_PRESENT, // Default: "FALSE"
			parameter_int_t TL_RX_RAM_RADDR_LATENCY, // Default: 1
			parameter_int_t TL_RX_RAM_RDATA_LATENCY, // Default: 2
			parameter_int_t TL_RX_RAM_WRITE_LATENCY, // Default: 0
			parameter_enum_t TL_TFC_DISABLE, // Default: "FALSE"
			parameter_enum_t TL_TX_CHECKS_DISABLE, // Default: "FALSE"
			parameter_int_t TL_TX_RAM_RADDR_LATENCY, // Default: 0
			parameter_int_t TL_TX_RAM_RDATA_LATENCY, // Default: 2
			parameter_enum_t USR_CFG, // Default: "FALSE"
			parameter_enum_t USR_EXT_CFG, // Default: "FALSE"
			parameter_enum_t VC0_CPL_INFINITE, // Default: "TRUE"
			parameter_int_t VC0_RX_RAM_LIMIT, // Default: 12'h01E
			parameter_int_t VC0_TOTAL_CREDITS_CD, // Default: 104
			parameter_int_t VC0_TOTAL_CREDITS_CH, // Default: 36
			parameter_int_t VC0_TOTAL_CREDITS_NPH, // Default: 8
			parameter_int_t VC0_TOTAL_CREDITS_PD, // Default: 288
			parameter_int_t VC0_TOTAL_CREDITS_PH, // Default: 32
			parameter_int_t VC0_TX_LASTPACKET, // Default: 31
			//Verilog Ports in definition order:
			NetFlow* CFGBUSNUMBER, // OUTPUT
			NetFlow* CFGCOMMANDBUSMASTERENABLE, // OUTPUT
			NetFlow* CFGCOMMANDINTERRUPTDISABLE, // OUTPUT
			NetFlow* CFGCOMMANDIOENABLE, // OUTPUT
			NetFlow* CFGCOMMANDMEMENABLE, // OUTPUT
			NetFlow* CFGCOMMANDSERREN, // OUTPUT
			NetFlow* CFGDEVCONTROLAUXPOWEREN, // OUTPUT
			NetFlow* CFGDEVCONTROLCORRERRREPORTINGEN, // OUTPUT
			NetFlow* CFGDEVCONTROLENABLERO, // OUTPUT
			NetFlow* CFGDEVCONTROLEXTTAGEN, // OUTPUT
			NetFlow* CFGDEVCONTROLFATALERRREPORTINGEN, // OUTPUT
			NetFlow* CFGDEVCONTROLMAXPAYLOAD, // OUTPUT
			NetFlow* CFGDEVCONTROLMAXREADREQ, // OUTPUT
			NetFlow* CFGDEVCONTROLNONFATALREPORTINGEN, // OUTPUT
			NetFlow* CFGDEVCONTROLNOSNOOPEN, // OUTPUT
			NetFlow* CFGDEVCONTROLPHANTOMEN, // OUTPUT
			NetFlow* CFGDEVCONTROLURERRREPORTINGEN, // OUTPUT
			NetFlow* CFGDEVICENUMBER, // OUTPUT
			NetFlow* CFGDEVSTATUSCORRERRDETECTED, // OUTPUT
			NetFlow* CFGDEVSTATUSFATALERRDETECTED, // OUTPUT
			NetFlow* CFGDEVSTATUSNONFATALERRDETECTED, // OUTPUT
			NetFlow* CFGDEVSTATUSURDETECTED, // OUTPUT
			NetFlow* CFGDO, // OUTPUT
			NetFlow* CFGERRCPLRDYN, // OUTPUT
			NetFlow* CFGFUNCTIONNUMBER, // OUTPUT
			NetFlow* CFGINTERRUPTDO, // OUTPUT
			NetFlow* CFGINTERRUPTMMENABLE, // OUTPUT
			NetFlow* CFGINTERRUPTMSIENABLE, // OUTPUT
			NetFlow* CFGINTERRUPTRDYN, // OUTPUT
			NetFlow* CFGLINKCONTOLRCB, // OUTPUT
			NetFlow* CFGLINKCONTROLASPMCONTROL, // OUTPUT
			NetFlow* CFGLINKCONTROLCOMMONCLOCK, // OUTPUT
			NetFlow* CFGLINKCONTROLEXTENDEDSYNC, // OUTPUT
			NetFlow* CFGLTSSMSTATE, // OUTPUT
			NetFlow* CFGPCIELINKSTATEN, // OUTPUT
			NetFlow* CFGRDWRDONEN, // OUTPUT
			NetFlow* CFGTOTURNOFFN, // OUTPUT
			NetFlow* DBGBADDLLPSTATUS, // OUTPUT
			NetFlow* DBGBADTLPLCRC, // OUTPUT
			NetFlow* DBGBADTLPSEQNUM, // OUTPUT
			NetFlow* DBGBADTLPSTATUS, // OUTPUT
			NetFlow* DBGDLPROTOCOLSTATUS, // OUTPUT
			NetFlow* DBGFCPROTOCOLERRSTATUS, // OUTPUT
			NetFlow* DBGMLFRMDLENGTH, // OUTPUT
			NetFlow* DBGMLFRMDMPS, // OUTPUT
			NetFlow* DBGMLFRMDTCVC, // OUTPUT
			NetFlow* DBGMLFRMDTLPSTATUS, // OUTPUT
			NetFlow* DBGMLFRMDUNRECTYPE, // OUTPUT
			NetFlow* DBGPOISTLPSTATUS, // OUTPUT
			NetFlow* DBGRCVROVERFLOWSTATUS, // OUTPUT
			NetFlow* DBGREGDETECTEDCORRECTABLE, // OUTPUT
			NetFlow* DBGREGDETECTEDFATAL, // OUTPUT
			NetFlow* DBGREGDETECTEDNONFATAL, // OUTPUT
			NetFlow* DBGREGDETECTEDUNSUPPORTED, // OUTPUT
			NetFlow* DBGRPLYROLLOVERSTATUS, // OUTPUT
			NetFlow* DBGRPLYTIMEOUTSTATUS, // OUTPUT
			NetFlow* DBGURNOBARHIT, // OUTPUT
			NetFlow* DBGURPOISCFGWR, // OUTPUT
			NetFlow* DBGURSTATUS, // OUTPUT
			NetFlow* DBGURUNSUPMSG, // OUTPUT
			NetFlow* MIMRXRADDR, // OUTPUT
			NetFlow* MIMRXREN, // OUTPUT
			NetFlow* MIMRXWADDR, // OUTPUT
			NetFlow* MIMRXWDATA, // OUTPUT
			NetFlow* MIMRXWEN, // OUTPUT
			NetFlow* MIMTXRADDR, // OUTPUT
			NetFlow* MIMTXREN, // OUTPUT
			NetFlow* MIMTXWADDR, // OUTPUT
			NetFlow* MIMTXWDATA, // OUTPUT
			NetFlow* MIMTXWEN, // OUTPUT
			NetFlow* PIPEGTPOWERDOWNA, // OUTPUT
			NetFlow* PIPEGTPOWERDOWNB, // OUTPUT
			NetFlow* PIPEGTTXELECIDLEA, // OUTPUT
			NetFlow* PIPEGTTXELECIDLEB, // OUTPUT
			NetFlow* PIPERXPOLARITYA, // OUTPUT
			NetFlow* PIPERXPOLARITYB, // OUTPUT
			NetFlow* PIPERXRESETA, // OUTPUT
			NetFlow* PIPERXRESETB, // OUTPUT
			NetFlow* PIPETXCHARDISPMODEA, // OUTPUT
			NetFlow* PIPETXCHARDISPMODEB, // OUTPUT
			NetFlow* PIPETXCHARDISPVALA, // OUTPUT
			NetFlow* PIPETXCHARDISPVALB, // OUTPUT
			NetFlow* PIPETXCHARISKA, // OUTPUT
			NetFlow* PIPETXCHARISKB, // OUTPUT
			NetFlow* PIPETXDATAA, // OUTPUT
			NetFlow* PIPETXDATAB, // OUTPUT
			NetFlow* PIPETXRCVRDETA, // OUTPUT
			NetFlow* PIPETXRCVRDETB, // OUTPUT
			NetFlow* RECEIVEDHOTRESET, // OUTPUT
			NetFlow* TRNFCCPLD, // OUTPUT
			NetFlow* TRNFCCPLH, // OUTPUT
			NetFlow* TRNFCNPD, // OUTPUT
			NetFlow* TRNFCNPH, // OUTPUT
			NetFlow* TRNFCPD, // OUTPUT
			NetFlow* TRNFCPH, // OUTPUT
			NetFlow* TRNLNKUPN, // OUTPUT
			NetFlow* TRNRBARHITN, // OUTPUT
			NetFlow* TRNRD, // OUTPUT
			NetFlow* TRNREOFN, // OUTPUT
			NetFlow* TRNRERRFWDN, // OUTPUT
			NetFlow* TRNRSOFN, // OUTPUT
			NetFlow* TRNRSRCDSCN, // OUTPUT
			NetFlow* TRNRSRCRDYN, // OUTPUT
			NetFlow* TRNTBUFAV, // OUTPUT
			NetFlow* TRNTCFGREQN, // OUTPUT
			NetFlow* TRNTDSTRDYN, // OUTPUT
			NetFlow* TRNTERRDROPN, // OUTPUT
			NetFlow* USERRSTN, // OUTPUT
			NetFlow* CFGDEVID, // INPUT
			NetFlow* CFGDSN, // INPUT
			NetFlow* CFGDWADDR, // INPUT
			NetFlow* CFGERRCORN, // INPUT
			NetFlow* CFGERRCPLABORTN, // INPUT
			NetFlow* CFGERRCPLTIMEOUTN, // INPUT
			NetFlow* CFGERRECRCN, // INPUT
			NetFlow* CFGERRLOCKEDN, // INPUT
			NetFlow* CFGERRPOSTEDN, // INPUT
			NetFlow* CFGERRTLPCPLHEADER, // INPUT
			NetFlow* CFGERRURN, // INPUT
			NetFlow* CFGINTERRUPTASSERTN, // INPUT
			NetFlow* CFGINTERRUPTDI, // INPUT
			NetFlow* CFGINTERRUPTN, // INPUT
			NetFlow* CFGPMWAKEN, // INPUT
			NetFlow* CFGRDENN, // INPUT
			NetFlow* CFGREVID, // INPUT
			NetFlow* CFGSUBSYSID, // INPUT
			NetFlow* CFGSUBSYSVENID, // INPUT
			NetFlow* CFGTRNPENDINGN, // INPUT
			NetFlow* CFGTURNOFFOKN, // INPUT
			NetFlow* CFGVENID, // INPUT
			NetFlow* CLOCKLOCKED, // INPUT
			NetFlow* MGTCLK, // INPUT
			NetFlow* MIMRXRDATA, // INPUT
			NetFlow* MIMTXRDATA, // INPUT
			NetFlow* PIPEGTRESETDONEA, // INPUT
			NetFlow* PIPEGTRESETDONEB, // INPUT
			NetFlow* PIPEPHYSTATUSA, // INPUT
			NetFlow* PIPEPHYSTATUSB, // INPUT
			NetFlow* PIPERXCHARISKA, // INPUT
			NetFlow* PIPERXCHARISKB, // INPUT
			NetFlow* PIPERXDATAA, // INPUT
			NetFlow* PIPERXDATAB, // INPUT
			NetFlow* PIPERXENTERELECIDLEA, // INPUT
			NetFlow* PIPERXENTERELECIDLEB, // INPUT
			NetFlow* PIPERXSTATUSA, // INPUT
			NetFlow* PIPERXSTATUSB, // INPUT
			NetFlow* SYSRESETN, // INPUT
			NetFlow* TRNFCSEL, // INPUT
			NetFlow* TRNRDSTRDYN, // INPUT
			NetFlow* TRNRNPOKN, // INPUT
			NetFlow* TRNTCFGGNTN, // INPUT
			NetFlow* TRNTD, // INPUT
			NetFlow* TRNTEOFN, // INPUT
			NetFlow* TRNTERRFWDN, // INPUT
			NetFlow* TRNTSOFN, // INPUT
			NetFlow* TRNTSRCDSCN, // INPUT
			NetFlow* TRNTSRCRDYN, // INPUT
			NetFlow* TRNTSTRN, // INPUT
			NetFlow* USERCLK // INPUT
			){
		
			// Assign parameters and ports: 
			//Verilog Parameters:
			this->LOC = LOC; // Default: "UNPLACED"
			this->BAR0 = BAR0; // Default: 32'h00000000
			this->BAR1 = BAR1; // Default: 32'h00000000
			this->BAR2 = BAR2; // Default: 32'h00000000
			this->BAR3 = BAR3; // Default: 32'h00000000
			this->BAR4 = BAR4; // Default: 32'h00000000
			this->BAR5 = BAR5; // Default: 32'h00000000
			this->CARDBUS_CIS_POINTER = CARDBUS_CIS_POINTER; // Default: 32'h00000000
			this->CLASS_CODE = CLASS_CODE; // Default: 24'h000000
			this->DEV_CAP_ENDPOINT_L0S_LATENCY = DEV_CAP_ENDPOINT_L0S_LATENCY; // Default: 7
			this->DEV_CAP_ENDPOINT_L1_LATENCY = DEV_CAP_ENDPOINT_L1_LATENCY; // Default: 7
			this->DEV_CAP_EXT_TAG_SUPPORTED = DEV_CAP_EXT_TAG_SUPPORTED; // Default: "FALSE"
			this->DEV_CAP_MAX_PAYLOAD_SUPPORTED = DEV_CAP_MAX_PAYLOAD_SUPPORTED; // Default: 2
			this->DEV_CAP_PHANTOM_FUNCTIONS_SUPPORT = DEV_CAP_PHANTOM_FUNCTIONS_SUPPORT; // Default: 0
			this->DEV_CAP_ROLE_BASED_ERROR = DEV_CAP_ROLE_BASED_ERROR; // Default: "TRUE"
			this->DISABLE_BAR_FILTERING = DISABLE_BAR_FILTERING; // Default: "FALSE"
			this->DISABLE_ID_CHECK = DISABLE_ID_CHECK; // Default: "FALSE"
			this->DISABLE_SCRAMBLING = DISABLE_SCRAMBLING; // Default: "FALSE"
			this->ENABLE_RX_TD_ECRC_TRIM = ENABLE_RX_TD_ECRC_TRIM; // Default: "FALSE"
			this->EXPANSION_ROM = EXPANSION_ROM; // Default: 22'h000000
			this->FAST_TRAIN = FAST_TRAIN; // Default: "FALSE"
			this->GTP_SEL = GTP_SEL; // Default: 0
			this->LINK_CAP_ASPM_SUPPORT = LINK_CAP_ASPM_SUPPORT; // Default: 1
			this->LINK_CAP_L0S_EXIT_LATENCY = LINK_CAP_L0S_EXIT_LATENCY; // Default: 7
			this->LINK_CAP_L1_EXIT_LATENCY = LINK_CAP_L1_EXIT_LATENCY; // Default: 7
			this->LINK_STATUS_SLOT_CLOCK_CONFIG = LINK_STATUS_SLOT_CLOCK_CONFIG; // Default: "FALSE"
			this->LL_ACK_TIMEOUT = LL_ACK_TIMEOUT; // Default: 15'h0204
			this->LL_ACK_TIMEOUT_EN = LL_ACK_TIMEOUT_EN; // Default: "FALSE"
			this->LL_REPLAY_TIMEOUT = LL_REPLAY_TIMEOUT; // Default: 15'h060D
			this->LL_REPLAY_TIMEOUT_EN = LL_REPLAY_TIMEOUT_EN; // Default: "FALSE"
			this->MSI_CAP_MULTIMSGCAP = MSI_CAP_MULTIMSGCAP; // Default: 0
			this->MSI_CAP_MULTIMSG_EXTENSION = MSI_CAP_MULTIMSG_EXTENSION; // Default: 0
			this->PCIE_CAP_CAPABILITY_VERSION = PCIE_CAP_CAPABILITY_VERSION; // Default: 4'h1
			this->PCIE_CAP_DEVICE_PORT_TYPE = PCIE_CAP_DEVICE_PORT_TYPE; // Default: 4'h0
			this->PCIE_CAP_INT_MSG_NUM = PCIE_CAP_INT_MSG_NUM; // Default: 5'b00000
			this->PCIE_CAP_SLOT_IMPLEMENTED = PCIE_CAP_SLOT_IMPLEMENTED; // Default: "FALSE"
			this->PCIE_GENERIC = PCIE_GENERIC; // Default: 12'h000
			this->PLM_AUTO_CONFIG = PLM_AUTO_CONFIG; // Default: "FALSE"
			this->PM_CAP_AUXCURRENT = PM_CAP_AUXCURRENT; // Default: 0
			this->PM_CAP_D1SUPPORT = PM_CAP_D1SUPPORT; // Default: "TRUE"
			this->PM_CAP_D2SUPPORT = PM_CAP_D2SUPPORT; // Default: "TRUE"
			this->PM_CAP_DSI = PM_CAP_DSI; // Default: "FALSE"
			this->PM_CAP_PMESUPPORT = PM_CAP_PMESUPPORT; // Default: 5'b01111
			this->PM_CAP_PME_CLOCK = PM_CAP_PME_CLOCK; // Default: "FALSE"
			this->PM_CAP_VERSION = PM_CAP_VERSION; // Default: 3
			this->PM_DATA0 = PM_DATA0; // Default: 8'h1E
			this->PM_DATA1 = PM_DATA1; // Default: 8'h1E
			this->PM_DATA2 = PM_DATA2; // Default: 8'h1E
			this->PM_DATA3 = PM_DATA3; // Default: 8'h1E
			this->PM_DATA4 = PM_DATA4; // Default: 8'h1E
			this->PM_DATA5 = PM_DATA5; // Default: 8'h1E
			this->PM_DATA6 = PM_DATA6; // Default: 8'h1E
			this->PM_DATA7 = PM_DATA7; // Default: 8'h1E
			this->PM_DATA_SCALE0 = PM_DATA_SCALE0; // Default: 2'b01
			this->PM_DATA_SCALE1 = PM_DATA_SCALE1; // Default: 2'b01
			this->PM_DATA_SCALE2 = PM_DATA_SCALE2; // Default: 2'b01
			this->PM_DATA_SCALE3 = PM_DATA_SCALE3; // Default: 2'b01
			this->PM_DATA_SCALE4 = PM_DATA_SCALE4; // Default: 2'b01
			this->PM_DATA_SCALE5 = PM_DATA_SCALE5; // Default: 2'b01
			this->PM_DATA_SCALE6 = PM_DATA_SCALE6; // Default: 2'b01
			this->PM_DATA_SCALE7 = PM_DATA_SCALE7; // Default: 2'b01
			this->SIM_VERSION = SIM_VERSION; // Default: "1.0"
			this->SLOT_CAP_ATT_BUTTON_PRESENT = SLOT_CAP_ATT_BUTTON_PRESENT; // Default: "FALSE"
			this->SLOT_CAP_ATT_INDICATOR_PRESENT = SLOT_CAP_ATT_INDICATOR_PRESENT; // Default: "FALSE"
			this->SLOT_CAP_POWER_INDICATOR_PRESENT = SLOT_CAP_POWER_INDICATOR_PRESENT; // Default: "FALSE"
			this->TL_RX_RAM_RADDR_LATENCY = TL_RX_RAM_RADDR_LATENCY; // Default: 1
			this->TL_RX_RAM_RDATA_LATENCY = TL_RX_RAM_RDATA_LATENCY; // Default: 2
			this->TL_RX_RAM_WRITE_LATENCY = TL_RX_RAM_WRITE_LATENCY; // Default: 0
			this->TL_TFC_DISABLE = TL_TFC_DISABLE; // Default: "FALSE"
			this->TL_TX_CHECKS_DISABLE = TL_TX_CHECKS_DISABLE; // Default: "FALSE"
			this->TL_TX_RAM_RADDR_LATENCY = TL_TX_RAM_RADDR_LATENCY; // Default: 0
			this->TL_TX_RAM_RDATA_LATENCY = TL_TX_RAM_RDATA_LATENCY; // Default: 2
			this->USR_CFG = USR_CFG; // Default: "FALSE"
			this->USR_EXT_CFG = USR_EXT_CFG; // Default: "FALSE"
			this->VC0_CPL_INFINITE = VC0_CPL_INFINITE; // Default: "TRUE"
			this->VC0_RX_RAM_LIMIT = VC0_RX_RAM_LIMIT; // Default: 12'h01E
			this->VC0_TOTAL_CREDITS_CD = VC0_TOTAL_CREDITS_CD; // Default: 104
			this->VC0_TOTAL_CREDITS_CH = VC0_TOTAL_CREDITS_CH; // Default: 36
			this->VC0_TOTAL_CREDITS_NPH = VC0_TOTAL_CREDITS_NPH; // Default: 8
			this->VC0_TOTAL_CREDITS_PD = VC0_TOTAL_CREDITS_PD; // Default: 288
			this->VC0_TOTAL_CREDITS_PH = VC0_TOTAL_CREDITS_PH; // Default: 32
			this->VC0_TX_LASTPACKET = VC0_TX_LASTPACKET; // Default: 31
			//Verilog Ports in definition order:
			this->CFGBUSNUMBER = CFGBUSNUMBER; // OUTPUT
			this->CFGCOMMANDBUSMASTERENABLE = CFGCOMMANDBUSMASTERENABLE; // OUTPUT
			this->CFGCOMMANDINTERRUPTDISABLE = CFGCOMMANDINTERRUPTDISABLE; // OUTPUT
			this->CFGCOMMANDIOENABLE = CFGCOMMANDIOENABLE; // OUTPUT
			this->CFGCOMMANDMEMENABLE = CFGCOMMANDMEMENABLE; // OUTPUT
			this->CFGCOMMANDSERREN = CFGCOMMANDSERREN; // OUTPUT
			this->CFGDEVCONTROLAUXPOWEREN = CFGDEVCONTROLAUXPOWEREN; // OUTPUT
			this->CFGDEVCONTROLCORRERRREPORTINGEN = CFGDEVCONTROLCORRERRREPORTINGEN; // OUTPUT
			this->CFGDEVCONTROLENABLERO = CFGDEVCONTROLENABLERO; // OUTPUT
			this->CFGDEVCONTROLEXTTAGEN = CFGDEVCONTROLEXTTAGEN; // OUTPUT
			this->CFGDEVCONTROLFATALERRREPORTINGEN = CFGDEVCONTROLFATALERRREPORTINGEN; // OUTPUT
			this->CFGDEVCONTROLMAXPAYLOAD = CFGDEVCONTROLMAXPAYLOAD; // OUTPUT
			this->CFGDEVCONTROLMAXREADREQ = CFGDEVCONTROLMAXREADREQ; // OUTPUT
			this->CFGDEVCONTROLNONFATALREPORTINGEN = CFGDEVCONTROLNONFATALREPORTINGEN; // OUTPUT
			this->CFGDEVCONTROLNOSNOOPEN = CFGDEVCONTROLNOSNOOPEN; // OUTPUT
			this->CFGDEVCONTROLPHANTOMEN = CFGDEVCONTROLPHANTOMEN; // OUTPUT
			this->CFGDEVCONTROLURERRREPORTINGEN = CFGDEVCONTROLURERRREPORTINGEN; // OUTPUT
			this->CFGDEVICENUMBER = CFGDEVICENUMBER; // OUTPUT
			this->CFGDEVSTATUSCORRERRDETECTED = CFGDEVSTATUSCORRERRDETECTED; // OUTPUT
			this->CFGDEVSTATUSFATALERRDETECTED = CFGDEVSTATUSFATALERRDETECTED; // OUTPUT
			this->CFGDEVSTATUSNONFATALERRDETECTED = CFGDEVSTATUSNONFATALERRDETECTED; // OUTPUT
			this->CFGDEVSTATUSURDETECTED = CFGDEVSTATUSURDETECTED; // OUTPUT
			this->CFGDO = CFGDO; // OUTPUT
			this->CFGERRCPLRDYN = CFGERRCPLRDYN; // OUTPUT
			this->CFGFUNCTIONNUMBER = CFGFUNCTIONNUMBER; // OUTPUT
			this->CFGINTERRUPTDO = CFGINTERRUPTDO; // OUTPUT
			this->CFGINTERRUPTMMENABLE = CFGINTERRUPTMMENABLE; // OUTPUT
			this->CFGINTERRUPTMSIENABLE = CFGINTERRUPTMSIENABLE; // OUTPUT
			this->CFGINTERRUPTRDYN = CFGINTERRUPTRDYN; // OUTPUT
			this->CFGLINKCONTOLRCB = CFGLINKCONTOLRCB; // OUTPUT
			this->CFGLINKCONTROLASPMCONTROL = CFGLINKCONTROLASPMCONTROL; // OUTPUT
			this->CFGLINKCONTROLCOMMONCLOCK = CFGLINKCONTROLCOMMONCLOCK; // OUTPUT
			this->CFGLINKCONTROLEXTENDEDSYNC = CFGLINKCONTROLEXTENDEDSYNC; // OUTPUT
			this->CFGLTSSMSTATE = CFGLTSSMSTATE; // OUTPUT
			this->CFGPCIELINKSTATEN = CFGPCIELINKSTATEN; // OUTPUT
			this->CFGRDWRDONEN = CFGRDWRDONEN; // OUTPUT
			this->CFGTOTURNOFFN = CFGTOTURNOFFN; // OUTPUT
			this->DBGBADDLLPSTATUS = DBGBADDLLPSTATUS; // OUTPUT
			this->DBGBADTLPLCRC = DBGBADTLPLCRC; // OUTPUT
			this->DBGBADTLPSEQNUM = DBGBADTLPSEQNUM; // OUTPUT
			this->DBGBADTLPSTATUS = DBGBADTLPSTATUS; // OUTPUT
			this->DBGDLPROTOCOLSTATUS = DBGDLPROTOCOLSTATUS; // OUTPUT
			this->DBGFCPROTOCOLERRSTATUS = DBGFCPROTOCOLERRSTATUS; // OUTPUT
			this->DBGMLFRMDLENGTH = DBGMLFRMDLENGTH; // OUTPUT
			this->DBGMLFRMDMPS = DBGMLFRMDMPS; // OUTPUT
			this->DBGMLFRMDTCVC = DBGMLFRMDTCVC; // OUTPUT
			this->DBGMLFRMDTLPSTATUS = DBGMLFRMDTLPSTATUS; // OUTPUT
			this->DBGMLFRMDUNRECTYPE = DBGMLFRMDUNRECTYPE; // OUTPUT
			this->DBGPOISTLPSTATUS = DBGPOISTLPSTATUS; // OUTPUT
			this->DBGRCVROVERFLOWSTATUS = DBGRCVROVERFLOWSTATUS; // OUTPUT
			this->DBGREGDETECTEDCORRECTABLE = DBGREGDETECTEDCORRECTABLE; // OUTPUT
			this->DBGREGDETECTEDFATAL = DBGREGDETECTEDFATAL; // OUTPUT
			this->DBGREGDETECTEDNONFATAL = DBGREGDETECTEDNONFATAL; // OUTPUT
			this->DBGREGDETECTEDUNSUPPORTED = DBGREGDETECTEDUNSUPPORTED; // OUTPUT
			this->DBGRPLYROLLOVERSTATUS = DBGRPLYROLLOVERSTATUS; // OUTPUT
			this->DBGRPLYTIMEOUTSTATUS = DBGRPLYTIMEOUTSTATUS; // OUTPUT
			this->DBGURNOBARHIT = DBGURNOBARHIT; // OUTPUT
			this->DBGURPOISCFGWR = DBGURPOISCFGWR; // OUTPUT
			this->DBGURSTATUS = DBGURSTATUS; // OUTPUT
			this->DBGURUNSUPMSG = DBGURUNSUPMSG; // OUTPUT
			this->MIMRXRADDR = MIMRXRADDR; // OUTPUT
			this->MIMRXREN = MIMRXREN; // OUTPUT
			this->MIMRXWADDR = MIMRXWADDR; // OUTPUT
			this->MIMRXWDATA = MIMRXWDATA; // OUTPUT
			this->MIMRXWEN = MIMRXWEN; // OUTPUT
			this->MIMTXRADDR = MIMTXRADDR; // OUTPUT
			this->MIMTXREN = MIMTXREN; // OUTPUT
			this->MIMTXWADDR = MIMTXWADDR; // OUTPUT
			this->MIMTXWDATA = MIMTXWDATA; // OUTPUT
			this->MIMTXWEN = MIMTXWEN; // OUTPUT
			this->PIPEGTPOWERDOWNA = PIPEGTPOWERDOWNA; // OUTPUT
			this->PIPEGTPOWERDOWNB = PIPEGTPOWERDOWNB; // OUTPUT
			this->PIPEGTTXELECIDLEA = PIPEGTTXELECIDLEA; // OUTPUT
			this->PIPEGTTXELECIDLEB = PIPEGTTXELECIDLEB; // OUTPUT
			this->PIPERXPOLARITYA = PIPERXPOLARITYA; // OUTPUT
			this->PIPERXPOLARITYB = PIPERXPOLARITYB; // OUTPUT
			this->PIPERXRESETA = PIPERXRESETA; // OUTPUT
			this->PIPERXRESETB = PIPERXRESETB; // OUTPUT
			this->PIPETXCHARDISPMODEA = PIPETXCHARDISPMODEA; // OUTPUT
			this->PIPETXCHARDISPMODEB = PIPETXCHARDISPMODEB; // OUTPUT
			this->PIPETXCHARDISPVALA = PIPETXCHARDISPVALA; // OUTPUT
			this->PIPETXCHARDISPVALB = PIPETXCHARDISPVALB; // OUTPUT
			this->PIPETXCHARISKA = PIPETXCHARISKA; // OUTPUT
			this->PIPETXCHARISKB = PIPETXCHARISKB; // OUTPUT
			this->PIPETXDATAA = PIPETXDATAA; // OUTPUT
			this->PIPETXDATAB = PIPETXDATAB; // OUTPUT
			this->PIPETXRCVRDETA = PIPETXRCVRDETA; // OUTPUT
			this->PIPETXRCVRDETB = PIPETXRCVRDETB; // OUTPUT
			this->RECEIVEDHOTRESET = RECEIVEDHOTRESET; // OUTPUT
			this->TRNFCCPLD = TRNFCCPLD; // OUTPUT
			this->TRNFCCPLH = TRNFCCPLH; // OUTPUT
			this->TRNFCNPD = TRNFCNPD; // OUTPUT
			this->TRNFCNPH = TRNFCNPH; // OUTPUT
			this->TRNFCPD = TRNFCPD; // OUTPUT
			this->TRNFCPH = TRNFCPH; // OUTPUT
			this->TRNLNKUPN = TRNLNKUPN; // OUTPUT
			this->TRNRBARHITN = TRNRBARHITN; // OUTPUT
			this->TRNRD = TRNRD; // OUTPUT
			this->TRNREOFN = TRNREOFN; // OUTPUT
			this->TRNRERRFWDN = TRNRERRFWDN; // OUTPUT
			this->TRNRSOFN = TRNRSOFN; // OUTPUT
			this->TRNRSRCDSCN = TRNRSRCDSCN; // OUTPUT
			this->TRNRSRCRDYN = TRNRSRCRDYN; // OUTPUT
			this->TRNTBUFAV = TRNTBUFAV; // OUTPUT
			this->TRNTCFGREQN = TRNTCFGREQN; // OUTPUT
			this->TRNTDSTRDYN = TRNTDSTRDYN; // OUTPUT
			this->TRNTERRDROPN = TRNTERRDROPN; // OUTPUT
			this->USERRSTN = USERRSTN; // OUTPUT
			this->CFGDEVID = CFGDEVID; // INPUT
			this->CFGDSN = CFGDSN; // INPUT
			this->CFGDWADDR = CFGDWADDR; // INPUT
			this->CFGERRCORN = CFGERRCORN; // INPUT
			this->CFGERRCPLABORTN = CFGERRCPLABORTN; // INPUT
			this->CFGERRCPLTIMEOUTN = CFGERRCPLTIMEOUTN; // INPUT
			this->CFGERRECRCN = CFGERRECRCN; // INPUT
			this->CFGERRLOCKEDN = CFGERRLOCKEDN; // INPUT
			this->CFGERRPOSTEDN = CFGERRPOSTEDN; // INPUT
			this->CFGERRTLPCPLHEADER = CFGERRTLPCPLHEADER; // INPUT
			this->CFGERRURN = CFGERRURN; // INPUT
			this->CFGINTERRUPTASSERTN = CFGINTERRUPTASSERTN; // INPUT
			this->CFGINTERRUPTDI = CFGINTERRUPTDI; // INPUT
			this->CFGINTERRUPTN = CFGINTERRUPTN; // INPUT
			this->CFGPMWAKEN = CFGPMWAKEN; // INPUT
			this->CFGRDENN = CFGRDENN; // INPUT
			this->CFGREVID = CFGREVID; // INPUT
			this->CFGSUBSYSID = CFGSUBSYSID; // INPUT
			this->CFGSUBSYSVENID = CFGSUBSYSVENID; // INPUT
			this->CFGTRNPENDINGN = CFGTRNPENDINGN; // INPUT
			this->CFGTURNOFFOKN = CFGTURNOFFOKN; // INPUT
			this->CFGVENID = CFGVENID; // INPUT
			this->CLOCKLOCKED = CLOCKLOCKED; // INPUT
			this->MGTCLK = MGTCLK; // INPUT
			this->MIMRXRDATA = MIMRXRDATA; // INPUT
			this->MIMTXRDATA = MIMTXRDATA; // INPUT
			this->PIPEGTRESETDONEA = PIPEGTRESETDONEA; // INPUT
			this->PIPEGTRESETDONEB = PIPEGTRESETDONEB; // INPUT
			this->PIPEPHYSTATUSA = PIPEPHYSTATUSA; // INPUT
			this->PIPEPHYSTATUSB = PIPEPHYSTATUSB; // INPUT
			this->PIPERXCHARISKA = PIPERXCHARISKA; // INPUT
			this->PIPERXCHARISKB = PIPERXCHARISKB; // INPUT
			this->PIPERXDATAA = PIPERXDATAA; // INPUT
			this->PIPERXDATAB = PIPERXDATAB; // INPUT
			this->PIPERXENTERELECIDLEA = PIPERXENTERELECIDLEA; // INPUT
			this->PIPERXENTERELECIDLEB = PIPERXENTERELECIDLEB; // INPUT
			this->PIPERXSTATUSA = PIPERXSTATUSA; // INPUT
			this->PIPERXSTATUSB = PIPERXSTATUSB; // INPUT
			this->SYSRESETN = SYSRESETN; // INPUT
			this->TRNFCSEL = TRNFCSEL; // INPUT
			this->TRNRDSTRDYN = TRNRDSTRDYN; // INPUT
			this->TRNRNPOKN = TRNRNPOKN; // INPUT
			this->TRNTCFGGNTN = TRNTCFGGNTN; // INPUT
			this->TRNTD = TRNTD; // INPUT
			this->TRNTEOFN = TRNTEOFN; // INPUT
			this->TRNTERRFWDN = TRNTERRFWDN; // INPUT
			this->TRNTSOFN = TRNTSOFN; // INPUT
			this->TRNTSRCDSCN = TRNTSRCDSCN; // INPUT
			this->TRNTSRCRDYN = TRNTSRCRDYN; // INPUT
			this->TRNTSTRN = TRNTSTRN; // INPUT
			this->USERCLK = USERCLK; // INPUT
		
			register_wait_on_event_nets();
		
		}
		
		void register_wait_on_event_nets(){
		// TODO
		}
		void calculate(int time){
		// TODO
		}
	};
	

}
