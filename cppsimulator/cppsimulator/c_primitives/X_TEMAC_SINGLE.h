/******************************************************************************
 * Generated Cpp template for simulation primitives.
 * Author: Benedek Racz
 ******************************************************************************/

#include "NetFlow.h"
#include "sim_types.h"

namespace CPrimitives {

	class X_TEMAC_SINGLE{

		//Verilog Parameters:
		parameter_string_t LOC;
		parameter_enum_t EMAC_1000BASEX_ENABLE;
		parameter_enum_t EMAC_ADDRFILTER_ENABLE;
		parameter_enum_t EMAC_BYTEPHY;
		parameter_enum_t EMAC_CTRLLENCHECK_DISABLE;
		parameter_int_t EMAC_DCRBASEADDR;
		parameter_enum_t EMAC_GTLOOPBACK;
		parameter_enum_t EMAC_HOST_ENABLE;
		parameter_int_t EMAC_LINKTIMERVAL;
		parameter_enum_t EMAC_LTCHECK_DISABLE;
		parameter_enum_t EMAC_MDIO_ENABLE;
		parameter_enum_t EMAC_MDIO_IGNORE_PHYADZERO;
		parameter_int_t EMAC_PAUSEADDR;
		parameter_enum_t EMAC_PHYINITAUTONEG_ENABLE;
		parameter_enum_t EMAC_PHYISOLATE;
		parameter_enum_t EMAC_PHYLOOPBACKMSB;
		parameter_enum_t EMAC_PHYPOWERDOWN;
		parameter_enum_t EMAC_PHYRESET;
		parameter_enum_t EMAC_RGMII_ENABLE;
		parameter_enum_t EMAC_RX16BITCLIENT_ENABLE;
		parameter_enum_t EMAC_RXFLOWCTRL_ENABLE;
		parameter_enum_t EMAC_RXHALFDUPLEX;
		parameter_enum_t EMAC_RXINBANDFCS_ENABLE;
		parameter_enum_t EMAC_RXJUMBOFRAME_ENABLE;
		parameter_enum_t EMAC_RXRESET;
		parameter_enum_t EMAC_RXVLAN_ENABLE;
		parameter_enum_t EMAC_RX_ENABLE;
		parameter_enum_t EMAC_SGMII_ENABLE;
		parameter_enum_t EMAC_SPEED_LSB;
		parameter_enum_t EMAC_SPEED_MSB;
		parameter_enum_t EMAC_TX16BITCLIENT_ENABLE;
		parameter_enum_t EMAC_TXFLOWCTRL_ENABLE;
		parameter_enum_t EMAC_TXHALFDUPLEX;
		parameter_enum_t EMAC_TXIFGADJUST_ENABLE;
		parameter_enum_t EMAC_TXINBANDFCS_ENABLE;
		parameter_enum_t EMAC_TXJUMBOFRAME_ENABLE;
		parameter_enum_t EMAC_TXRESET;
		parameter_enum_t EMAC_TXVLAN_ENABLE;
		parameter_enum_t EMAC_TX_ENABLE;
		parameter_int_t EMAC_UNICASTADDR;
		parameter_enum_t EMAC_UNIDIRECTION_ENABLE;
		parameter_enum_t EMAC_USECLKEN;
		parameter_string_t SIM_VERSION;
		//Verilog Ports in definition order:
		NetFlow* DCRHOSTDONEIR; // OUTPUT
		NetFlow* EMACCLIENTANINTERRUPT; // OUTPUT
		NetFlow* EMACCLIENTRXBADFRAME; // OUTPUT
		NetFlow* EMACCLIENTRXCLIENTCLKOUT; // OUTPUT
		NetFlow* EMACCLIENTRXD; // OUTPUT
		NetFlow* EMACCLIENTRXDVLD; // OUTPUT
		NetFlow* EMACCLIENTRXDVLDMSW; // OUTPUT
		NetFlow* EMACCLIENTRXFRAMEDROP; // OUTPUT
		NetFlow* EMACCLIENTRXGOODFRAME; // OUTPUT
		NetFlow* EMACCLIENTRXSTATS; // OUTPUT
		NetFlow* EMACCLIENTRXSTATSBYTEVLD; // OUTPUT
		NetFlow* EMACCLIENTRXSTATSVLD; // OUTPUT
		NetFlow* EMACCLIENTTXACK; // OUTPUT
		NetFlow* EMACCLIENTTXCLIENTCLKOUT; // OUTPUT
		NetFlow* EMACCLIENTTXCOLLISION; // OUTPUT
		NetFlow* EMACCLIENTTXRETRANSMIT; // OUTPUT
		NetFlow* EMACCLIENTTXSTATS; // OUTPUT
		NetFlow* EMACCLIENTTXSTATSBYTEVLD; // OUTPUT
		NetFlow* EMACCLIENTTXSTATSVLD; // OUTPUT
		NetFlow* EMACDCRACK; // OUTPUT
		NetFlow* EMACDCRDBUS; // OUTPUT
		NetFlow* EMACPHYENCOMMAALIGN; // OUTPUT
		NetFlow* EMACPHYLOOPBACKMSB; // OUTPUT
		NetFlow* EMACPHYMCLKOUT; // OUTPUT
		NetFlow* EMACPHYMDOUT; // OUTPUT
		NetFlow* EMACPHYMDTRI; // OUTPUT
		NetFlow* EMACPHYMGTRXRESET; // OUTPUT
		NetFlow* EMACPHYMGTTXRESET; // OUTPUT
		NetFlow* EMACPHYPOWERDOWN; // OUTPUT
		NetFlow* EMACPHYSYNCACQSTATUS; // OUTPUT
		NetFlow* EMACPHYTXCHARDISPMODE; // OUTPUT
		NetFlow* EMACPHYTXCHARDISPVAL; // OUTPUT
		NetFlow* EMACPHYTXCHARISK; // OUTPUT
		NetFlow* EMACPHYTXCLK; // OUTPUT
		NetFlow* EMACPHYTXD; // OUTPUT
		NetFlow* EMACPHYTXEN; // OUTPUT
		NetFlow* EMACPHYTXER; // OUTPUT
		NetFlow* EMACPHYTXGMIIMIICLKOUT; // OUTPUT
		NetFlow* EMACSPEEDIS10100; // OUTPUT
		NetFlow* HOSTMIIMRDY; // OUTPUT
		NetFlow* HOSTRDDATA; // OUTPUT
		NetFlow* CLIENTEMACDCMLOCKED; // INPUT
		NetFlow* CLIENTEMACPAUSEREQ; // INPUT
		NetFlow* CLIENTEMACPAUSEVAL; // INPUT
		NetFlow* CLIENTEMACRXCLIENTCLKIN; // INPUT
		NetFlow* CLIENTEMACTXCLIENTCLKIN; // INPUT
		NetFlow* CLIENTEMACTXD; // INPUT
		NetFlow* CLIENTEMACTXDVLD; // INPUT
		NetFlow* CLIENTEMACTXDVLDMSW; // INPUT
		NetFlow* CLIENTEMACTXFIRSTBYTE; // INPUT
		NetFlow* CLIENTEMACTXIFGDELAY; // INPUT
		NetFlow* CLIENTEMACTXUNDERRUN; // INPUT
		NetFlow* DCREMACABUS; // INPUT
		NetFlow* DCREMACCLK; // INPUT
		NetFlow* DCREMACDBUS; // INPUT
		NetFlow* DCREMACENABLE; // INPUT
		NetFlow* DCREMACREAD; // INPUT
		NetFlow* DCREMACWRITE; // INPUT
		NetFlow* HOSTADDR; // INPUT
		NetFlow* HOSTCLK; // INPUT
		NetFlow* HOSTMIIMSEL; // INPUT
		NetFlow* HOSTOPCODE; // INPUT
		NetFlow* HOSTREQ; // INPUT
		NetFlow* HOSTWRDATA; // INPUT
		NetFlow* PHYEMACCOL; // INPUT
		NetFlow* PHYEMACCRS; // INPUT
		NetFlow* PHYEMACGTXCLK; // INPUT
		NetFlow* PHYEMACMCLKIN; // INPUT
		NetFlow* PHYEMACMDIN; // INPUT
		NetFlow* PHYEMACMIITXCLK; // INPUT
		NetFlow* PHYEMACPHYAD; // INPUT
		NetFlow* PHYEMACRXBUFSTATUS; // INPUT
		NetFlow* PHYEMACRXCHARISCOMMA; // INPUT
		NetFlow* PHYEMACRXCHARISK; // INPUT
		NetFlow* PHYEMACRXCLK; // INPUT
		NetFlow* PHYEMACRXCLKCORCNT; // INPUT
		NetFlow* PHYEMACRXD; // INPUT
		NetFlow* PHYEMACRXDISPERR; // INPUT
		NetFlow* PHYEMACRXDV; // INPUT
		NetFlow* PHYEMACRXER; // INPUT
		NetFlow* PHYEMACRXNOTINTABLE; // INPUT
		NetFlow* PHYEMACRXRUNDISP; // INPUT
		NetFlow* PHYEMACSIGNALDET; // INPUT
		NetFlow* PHYEMACTXBUFERR; // INPUT
		NetFlow* PHYEMACTXGMIIMIICLKIN; // INPUT
		NetFlow* RESET; // INPUT
		
	
		X_TEMAC_SINGLE(
			//Verilog Parameters:
			parameter_string_t LOC, // Default: "UNPLACED"
			parameter_enum_t EMAC_1000BASEX_ENABLE, // Default: "FALSE"
			parameter_enum_t EMAC_ADDRFILTER_ENABLE, // Default: "FALSE"
			parameter_enum_t EMAC_BYTEPHY, // Default: "FALSE"
			parameter_enum_t EMAC_CTRLLENCHECK_DISABLE, // Default: "FALSE"
			parameter_int_t EMAC_DCRBASEADDR, // Default: 8'h00
			parameter_enum_t EMAC_GTLOOPBACK, // Default: "FALSE"
			parameter_enum_t EMAC_HOST_ENABLE, // Default: "FALSE"
			parameter_int_t EMAC_LINKTIMERVAL, // Default: 9'h000
			parameter_enum_t EMAC_LTCHECK_DISABLE, // Default: "FALSE"
			parameter_enum_t EMAC_MDIO_ENABLE, // Default: "FALSE"
			parameter_enum_t EMAC_MDIO_IGNORE_PHYADZERO, // Default: "FALSE"
			parameter_int_t EMAC_PAUSEADDR, // Default: 48'h000000000000
			parameter_enum_t EMAC_PHYINITAUTONEG_ENABLE, // Default: "FALSE"
			parameter_enum_t EMAC_PHYISOLATE, // Default: "FALSE"
			parameter_enum_t EMAC_PHYLOOPBACKMSB, // Default: "FALSE"
			parameter_enum_t EMAC_PHYPOWERDOWN, // Default: "FALSE"
			parameter_enum_t EMAC_PHYRESET, // Default: "FALSE"
			parameter_enum_t EMAC_RGMII_ENABLE, // Default: "FALSE"
			parameter_enum_t EMAC_RX16BITCLIENT_ENABLE, // Default: "FALSE"
			parameter_enum_t EMAC_RXFLOWCTRL_ENABLE, // Default: "FALSE"
			parameter_enum_t EMAC_RXHALFDUPLEX, // Default: "FALSE"
			parameter_enum_t EMAC_RXINBANDFCS_ENABLE, // Default: "FALSE"
			parameter_enum_t EMAC_RXJUMBOFRAME_ENABLE, // Default: "FALSE"
			parameter_enum_t EMAC_RXRESET, // Default: "FALSE"
			parameter_enum_t EMAC_RXVLAN_ENABLE, // Default: "FALSE"
			parameter_enum_t EMAC_RX_ENABLE, // Default: "TRUE"
			parameter_enum_t EMAC_SGMII_ENABLE, // Default: "FALSE"
			parameter_enum_t EMAC_SPEED_LSB, // Default: "FALSE"
			parameter_enum_t EMAC_SPEED_MSB, // Default: "FALSE"
			parameter_enum_t EMAC_TX16BITCLIENT_ENABLE, // Default: "FALSE"
			parameter_enum_t EMAC_TXFLOWCTRL_ENABLE, // Default: "FALSE"
			parameter_enum_t EMAC_TXHALFDUPLEX, // Default: "FALSE"
			parameter_enum_t EMAC_TXIFGADJUST_ENABLE, // Default: "FALSE"
			parameter_enum_t EMAC_TXINBANDFCS_ENABLE, // Default: "FALSE"
			parameter_enum_t EMAC_TXJUMBOFRAME_ENABLE, // Default: "FALSE"
			parameter_enum_t EMAC_TXRESET, // Default: "FALSE"
			parameter_enum_t EMAC_TXVLAN_ENABLE, // Default: "FALSE"
			parameter_enum_t EMAC_TX_ENABLE, // Default: "TRUE"
			parameter_int_t EMAC_UNICASTADDR, // Default: 48'h000000000000
			parameter_enum_t EMAC_UNIDIRECTION_ENABLE, // Default: "FALSE"
			parameter_enum_t EMAC_USECLKEN, // Default: "FALSE"
			parameter_string_t SIM_VERSION, // Default: "1.0"
			//Verilog Ports in definition order:
			NetFlow* DCRHOSTDONEIR, // OUTPUT
			NetFlow* EMACCLIENTANINTERRUPT, // OUTPUT
			NetFlow* EMACCLIENTRXBADFRAME, // OUTPUT
			NetFlow* EMACCLIENTRXCLIENTCLKOUT, // OUTPUT
			NetFlow* EMACCLIENTRXD, // OUTPUT
			NetFlow* EMACCLIENTRXDVLD, // OUTPUT
			NetFlow* EMACCLIENTRXDVLDMSW, // OUTPUT
			NetFlow* EMACCLIENTRXFRAMEDROP, // OUTPUT
			NetFlow* EMACCLIENTRXGOODFRAME, // OUTPUT
			NetFlow* EMACCLIENTRXSTATS, // OUTPUT
			NetFlow* EMACCLIENTRXSTATSBYTEVLD, // OUTPUT
			NetFlow* EMACCLIENTRXSTATSVLD, // OUTPUT
			NetFlow* EMACCLIENTTXACK, // OUTPUT
			NetFlow* EMACCLIENTTXCLIENTCLKOUT, // OUTPUT
			NetFlow* EMACCLIENTTXCOLLISION, // OUTPUT
			NetFlow* EMACCLIENTTXRETRANSMIT, // OUTPUT
			NetFlow* EMACCLIENTTXSTATS, // OUTPUT
			NetFlow* EMACCLIENTTXSTATSBYTEVLD, // OUTPUT
			NetFlow* EMACCLIENTTXSTATSVLD, // OUTPUT
			NetFlow* EMACDCRACK, // OUTPUT
			NetFlow* EMACDCRDBUS, // OUTPUT
			NetFlow* EMACPHYENCOMMAALIGN, // OUTPUT
			NetFlow* EMACPHYLOOPBACKMSB, // OUTPUT
			NetFlow* EMACPHYMCLKOUT, // OUTPUT
			NetFlow* EMACPHYMDOUT, // OUTPUT
			NetFlow* EMACPHYMDTRI, // OUTPUT
			NetFlow* EMACPHYMGTRXRESET, // OUTPUT
			NetFlow* EMACPHYMGTTXRESET, // OUTPUT
			NetFlow* EMACPHYPOWERDOWN, // OUTPUT
			NetFlow* EMACPHYSYNCACQSTATUS, // OUTPUT
			NetFlow* EMACPHYTXCHARDISPMODE, // OUTPUT
			NetFlow* EMACPHYTXCHARDISPVAL, // OUTPUT
			NetFlow* EMACPHYTXCHARISK, // OUTPUT
			NetFlow* EMACPHYTXCLK, // OUTPUT
			NetFlow* EMACPHYTXD, // OUTPUT
			NetFlow* EMACPHYTXEN, // OUTPUT
			NetFlow* EMACPHYTXER, // OUTPUT
			NetFlow* EMACPHYTXGMIIMIICLKOUT, // OUTPUT
			NetFlow* EMACSPEEDIS10100, // OUTPUT
			NetFlow* HOSTMIIMRDY, // OUTPUT
			NetFlow* HOSTRDDATA, // OUTPUT
			NetFlow* CLIENTEMACDCMLOCKED, // INPUT
			NetFlow* CLIENTEMACPAUSEREQ, // INPUT
			NetFlow* CLIENTEMACPAUSEVAL, // INPUT
			NetFlow* CLIENTEMACRXCLIENTCLKIN, // INPUT
			NetFlow* CLIENTEMACTXCLIENTCLKIN, // INPUT
			NetFlow* CLIENTEMACTXD, // INPUT
			NetFlow* CLIENTEMACTXDVLD, // INPUT
			NetFlow* CLIENTEMACTXDVLDMSW, // INPUT
			NetFlow* CLIENTEMACTXFIRSTBYTE, // INPUT
			NetFlow* CLIENTEMACTXIFGDELAY, // INPUT
			NetFlow* CLIENTEMACTXUNDERRUN, // INPUT
			NetFlow* DCREMACABUS, // INPUT
			NetFlow* DCREMACCLK, // INPUT
			NetFlow* DCREMACDBUS, // INPUT
			NetFlow* DCREMACENABLE, // INPUT
			NetFlow* DCREMACREAD, // INPUT
			NetFlow* DCREMACWRITE, // INPUT
			NetFlow* HOSTADDR, // INPUT
			NetFlow* HOSTCLK, // INPUT
			NetFlow* HOSTMIIMSEL, // INPUT
			NetFlow* HOSTOPCODE, // INPUT
			NetFlow* HOSTREQ, // INPUT
			NetFlow* HOSTWRDATA, // INPUT
			NetFlow* PHYEMACCOL, // INPUT
			NetFlow* PHYEMACCRS, // INPUT
			NetFlow* PHYEMACGTXCLK, // INPUT
			NetFlow* PHYEMACMCLKIN, // INPUT
			NetFlow* PHYEMACMDIN, // INPUT
			NetFlow* PHYEMACMIITXCLK, // INPUT
			NetFlow* PHYEMACPHYAD, // INPUT
			NetFlow* PHYEMACRXBUFSTATUS, // INPUT
			NetFlow* PHYEMACRXCHARISCOMMA, // INPUT
			NetFlow* PHYEMACRXCHARISK, // INPUT
			NetFlow* PHYEMACRXCLK, // INPUT
			NetFlow* PHYEMACRXCLKCORCNT, // INPUT
			NetFlow* PHYEMACRXD, // INPUT
			NetFlow* PHYEMACRXDISPERR, // INPUT
			NetFlow* PHYEMACRXDV, // INPUT
			NetFlow* PHYEMACRXER, // INPUT
			NetFlow* PHYEMACRXNOTINTABLE, // INPUT
			NetFlow* PHYEMACRXRUNDISP, // INPUT
			NetFlow* PHYEMACSIGNALDET, // INPUT
			NetFlow* PHYEMACTXBUFERR, // INPUT
			NetFlow* PHYEMACTXGMIIMIICLKIN, // INPUT
			NetFlow* RESET // INPUT
			){
		
			// Assign parameters and ports: 
			//Verilog Parameters:
			this->LOC = LOC; // Default: "UNPLACED"
			this->EMAC_1000BASEX_ENABLE = EMAC_1000BASEX_ENABLE; // Default: "FALSE"
			this->EMAC_ADDRFILTER_ENABLE = EMAC_ADDRFILTER_ENABLE; // Default: "FALSE"
			this->EMAC_BYTEPHY = EMAC_BYTEPHY; // Default: "FALSE"
			this->EMAC_CTRLLENCHECK_DISABLE = EMAC_CTRLLENCHECK_DISABLE; // Default: "FALSE"
			this->EMAC_DCRBASEADDR = EMAC_DCRBASEADDR; // Default: 8'h00
			this->EMAC_GTLOOPBACK = EMAC_GTLOOPBACK; // Default: "FALSE"
			this->EMAC_HOST_ENABLE = EMAC_HOST_ENABLE; // Default: "FALSE"
			this->EMAC_LINKTIMERVAL = EMAC_LINKTIMERVAL; // Default: 9'h000
			this->EMAC_LTCHECK_DISABLE = EMAC_LTCHECK_DISABLE; // Default: "FALSE"
			this->EMAC_MDIO_ENABLE = EMAC_MDIO_ENABLE; // Default: "FALSE"
			this->EMAC_MDIO_IGNORE_PHYADZERO = EMAC_MDIO_IGNORE_PHYADZERO; // Default: "FALSE"
			this->EMAC_PAUSEADDR = EMAC_PAUSEADDR; // Default: 48'h000000000000
			this->EMAC_PHYINITAUTONEG_ENABLE = EMAC_PHYINITAUTONEG_ENABLE; // Default: "FALSE"
			this->EMAC_PHYISOLATE = EMAC_PHYISOLATE; // Default: "FALSE"
			this->EMAC_PHYLOOPBACKMSB = EMAC_PHYLOOPBACKMSB; // Default: "FALSE"
			this->EMAC_PHYPOWERDOWN = EMAC_PHYPOWERDOWN; // Default: "FALSE"
			this->EMAC_PHYRESET = EMAC_PHYRESET; // Default: "FALSE"
			this->EMAC_RGMII_ENABLE = EMAC_RGMII_ENABLE; // Default: "FALSE"
			this->EMAC_RX16BITCLIENT_ENABLE = EMAC_RX16BITCLIENT_ENABLE; // Default: "FALSE"
			this->EMAC_RXFLOWCTRL_ENABLE = EMAC_RXFLOWCTRL_ENABLE; // Default: "FALSE"
			this->EMAC_RXHALFDUPLEX = EMAC_RXHALFDUPLEX; // Default: "FALSE"
			this->EMAC_RXINBANDFCS_ENABLE = EMAC_RXINBANDFCS_ENABLE; // Default: "FALSE"
			this->EMAC_RXJUMBOFRAME_ENABLE = EMAC_RXJUMBOFRAME_ENABLE; // Default: "FALSE"
			this->EMAC_RXRESET = EMAC_RXRESET; // Default: "FALSE"
			this->EMAC_RXVLAN_ENABLE = EMAC_RXVLAN_ENABLE; // Default: "FALSE"
			this->EMAC_RX_ENABLE = EMAC_RX_ENABLE; // Default: "TRUE"
			this->EMAC_SGMII_ENABLE = EMAC_SGMII_ENABLE; // Default: "FALSE"
			this->EMAC_SPEED_LSB = EMAC_SPEED_LSB; // Default: "FALSE"
			this->EMAC_SPEED_MSB = EMAC_SPEED_MSB; // Default: "FALSE"
			this->EMAC_TX16BITCLIENT_ENABLE = EMAC_TX16BITCLIENT_ENABLE; // Default: "FALSE"
			this->EMAC_TXFLOWCTRL_ENABLE = EMAC_TXFLOWCTRL_ENABLE; // Default: "FALSE"
			this->EMAC_TXHALFDUPLEX = EMAC_TXHALFDUPLEX; // Default: "FALSE"
			this->EMAC_TXIFGADJUST_ENABLE = EMAC_TXIFGADJUST_ENABLE; // Default: "FALSE"
			this->EMAC_TXINBANDFCS_ENABLE = EMAC_TXINBANDFCS_ENABLE; // Default: "FALSE"
			this->EMAC_TXJUMBOFRAME_ENABLE = EMAC_TXJUMBOFRAME_ENABLE; // Default: "FALSE"
			this->EMAC_TXRESET = EMAC_TXRESET; // Default: "FALSE"
			this->EMAC_TXVLAN_ENABLE = EMAC_TXVLAN_ENABLE; // Default: "FALSE"
			this->EMAC_TX_ENABLE = EMAC_TX_ENABLE; // Default: "TRUE"
			this->EMAC_UNICASTADDR = EMAC_UNICASTADDR; // Default: 48'h000000000000
			this->EMAC_UNIDIRECTION_ENABLE = EMAC_UNIDIRECTION_ENABLE; // Default: "FALSE"
			this->EMAC_USECLKEN = EMAC_USECLKEN; // Default: "FALSE"
			this->SIM_VERSION = SIM_VERSION; // Default: "1.0"
			//Verilog Ports in definition order:
			this->DCRHOSTDONEIR = DCRHOSTDONEIR; // OUTPUT
			this->EMACCLIENTANINTERRUPT = EMACCLIENTANINTERRUPT; // OUTPUT
			this->EMACCLIENTRXBADFRAME = EMACCLIENTRXBADFRAME; // OUTPUT
			this->EMACCLIENTRXCLIENTCLKOUT = EMACCLIENTRXCLIENTCLKOUT; // OUTPUT
			this->EMACCLIENTRXD = EMACCLIENTRXD; // OUTPUT
			this->EMACCLIENTRXDVLD = EMACCLIENTRXDVLD; // OUTPUT
			this->EMACCLIENTRXDVLDMSW = EMACCLIENTRXDVLDMSW; // OUTPUT
			this->EMACCLIENTRXFRAMEDROP = EMACCLIENTRXFRAMEDROP; // OUTPUT
			this->EMACCLIENTRXGOODFRAME = EMACCLIENTRXGOODFRAME; // OUTPUT
			this->EMACCLIENTRXSTATS = EMACCLIENTRXSTATS; // OUTPUT
			this->EMACCLIENTRXSTATSBYTEVLD = EMACCLIENTRXSTATSBYTEVLD; // OUTPUT
			this->EMACCLIENTRXSTATSVLD = EMACCLIENTRXSTATSVLD; // OUTPUT
			this->EMACCLIENTTXACK = EMACCLIENTTXACK; // OUTPUT
			this->EMACCLIENTTXCLIENTCLKOUT = EMACCLIENTTXCLIENTCLKOUT; // OUTPUT
			this->EMACCLIENTTXCOLLISION = EMACCLIENTTXCOLLISION; // OUTPUT
			this->EMACCLIENTTXRETRANSMIT = EMACCLIENTTXRETRANSMIT; // OUTPUT
			this->EMACCLIENTTXSTATS = EMACCLIENTTXSTATS; // OUTPUT
			this->EMACCLIENTTXSTATSBYTEVLD = EMACCLIENTTXSTATSBYTEVLD; // OUTPUT
			this->EMACCLIENTTXSTATSVLD = EMACCLIENTTXSTATSVLD; // OUTPUT
			this->EMACDCRACK = EMACDCRACK; // OUTPUT
			this->EMACDCRDBUS = EMACDCRDBUS; // OUTPUT
			this->EMACPHYENCOMMAALIGN = EMACPHYENCOMMAALIGN; // OUTPUT
			this->EMACPHYLOOPBACKMSB = EMACPHYLOOPBACKMSB; // OUTPUT
			this->EMACPHYMCLKOUT = EMACPHYMCLKOUT; // OUTPUT
			this->EMACPHYMDOUT = EMACPHYMDOUT; // OUTPUT
			this->EMACPHYMDTRI = EMACPHYMDTRI; // OUTPUT
			this->EMACPHYMGTRXRESET = EMACPHYMGTRXRESET; // OUTPUT
			this->EMACPHYMGTTXRESET = EMACPHYMGTTXRESET; // OUTPUT
			this->EMACPHYPOWERDOWN = EMACPHYPOWERDOWN; // OUTPUT
			this->EMACPHYSYNCACQSTATUS = EMACPHYSYNCACQSTATUS; // OUTPUT
			this->EMACPHYTXCHARDISPMODE = EMACPHYTXCHARDISPMODE; // OUTPUT
			this->EMACPHYTXCHARDISPVAL = EMACPHYTXCHARDISPVAL; // OUTPUT
			this->EMACPHYTXCHARISK = EMACPHYTXCHARISK; // OUTPUT
			this->EMACPHYTXCLK = EMACPHYTXCLK; // OUTPUT
			this->EMACPHYTXD = EMACPHYTXD; // OUTPUT
			this->EMACPHYTXEN = EMACPHYTXEN; // OUTPUT
			this->EMACPHYTXER = EMACPHYTXER; // OUTPUT
			this->EMACPHYTXGMIIMIICLKOUT = EMACPHYTXGMIIMIICLKOUT; // OUTPUT
			this->EMACSPEEDIS10100 = EMACSPEEDIS10100; // OUTPUT
			this->HOSTMIIMRDY = HOSTMIIMRDY; // OUTPUT
			this->HOSTRDDATA = HOSTRDDATA; // OUTPUT
			this->CLIENTEMACDCMLOCKED = CLIENTEMACDCMLOCKED; // INPUT
			this->CLIENTEMACPAUSEREQ = CLIENTEMACPAUSEREQ; // INPUT
			this->CLIENTEMACPAUSEVAL = CLIENTEMACPAUSEVAL; // INPUT
			this->CLIENTEMACRXCLIENTCLKIN = CLIENTEMACRXCLIENTCLKIN; // INPUT
			this->CLIENTEMACTXCLIENTCLKIN = CLIENTEMACTXCLIENTCLKIN; // INPUT
			this->CLIENTEMACTXD = CLIENTEMACTXD; // INPUT
			this->CLIENTEMACTXDVLD = CLIENTEMACTXDVLD; // INPUT
			this->CLIENTEMACTXDVLDMSW = CLIENTEMACTXDVLDMSW; // INPUT
			this->CLIENTEMACTXFIRSTBYTE = CLIENTEMACTXFIRSTBYTE; // INPUT
			this->CLIENTEMACTXIFGDELAY = CLIENTEMACTXIFGDELAY; // INPUT
			this->CLIENTEMACTXUNDERRUN = CLIENTEMACTXUNDERRUN; // INPUT
			this->DCREMACABUS = DCREMACABUS; // INPUT
			this->DCREMACCLK = DCREMACCLK; // INPUT
			this->DCREMACDBUS = DCREMACDBUS; // INPUT
			this->DCREMACENABLE = DCREMACENABLE; // INPUT
			this->DCREMACREAD = DCREMACREAD; // INPUT
			this->DCREMACWRITE = DCREMACWRITE; // INPUT
			this->HOSTADDR = HOSTADDR; // INPUT
			this->HOSTCLK = HOSTCLK; // INPUT
			this->HOSTMIIMSEL = HOSTMIIMSEL; // INPUT
			this->HOSTOPCODE = HOSTOPCODE; // INPUT
			this->HOSTREQ = HOSTREQ; // INPUT
			this->HOSTWRDATA = HOSTWRDATA; // INPUT
			this->PHYEMACCOL = PHYEMACCOL; // INPUT
			this->PHYEMACCRS = PHYEMACCRS; // INPUT
			this->PHYEMACGTXCLK = PHYEMACGTXCLK; // INPUT
			this->PHYEMACMCLKIN = PHYEMACMCLKIN; // INPUT
			this->PHYEMACMDIN = PHYEMACMDIN; // INPUT
			this->PHYEMACMIITXCLK = PHYEMACMIITXCLK; // INPUT
			this->PHYEMACPHYAD = PHYEMACPHYAD; // INPUT
			this->PHYEMACRXBUFSTATUS = PHYEMACRXBUFSTATUS; // INPUT
			this->PHYEMACRXCHARISCOMMA = PHYEMACRXCHARISCOMMA; // INPUT
			this->PHYEMACRXCHARISK = PHYEMACRXCHARISK; // INPUT
			this->PHYEMACRXCLK = PHYEMACRXCLK; // INPUT
			this->PHYEMACRXCLKCORCNT = PHYEMACRXCLKCORCNT; // INPUT
			this->PHYEMACRXD = PHYEMACRXD; // INPUT
			this->PHYEMACRXDISPERR = PHYEMACRXDISPERR; // INPUT
			this->PHYEMACRXDV = PHYEMACRXDV; // INPUT
			this->PHYEMACRXER = PHYEMACRXER; // INPUT
			this->PHYEMACRXNOTINTABLE = PHYEMACRXNOTINTABLE; // INPUT
			this->PHYEMACRXRUNDISP = PHYEMACRXRUNDISP; // INPUT
			this->PHYEMACSIGNALDET = PHYEMACSIGNALDET; // INPUT
			this->PHYEMACTXBUFERR = PHYEMACTXBUFERR; // INPUT
			this->PHYEMACTXGMIIMIICLKIN = PHYEMACTXGMIIMIICLKIN; // INPUT
			this->RESET = RESET; // INPUT
		
			register_wait_on_event_nets();
		
		}
		
		void register_wait_on_event_nets(){
		// TODO
		}
		void calculate(int time){
		// TODO
		}
	};
	

}
